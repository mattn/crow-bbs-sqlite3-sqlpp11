// generated by ddl2cpp schema.sql bbs bbsapp
#ifndef BBSAPP_BBS_H
#define BBSAPP_BBS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace bbsapp
{
  namespace Bbs_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Text
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "text";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T text;
            T& operator()() { return text; }
            const T& operator()() const { return text; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Created
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "created";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T created;
            T& operator()() { return created; }
            const T& operator()() const { return created; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
  }

  struct Bbs: sqlpp::table_t<Bbs,
               Bbs_::Id,
               Bbs_::Text,
               Bbs_::Created>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "bbs";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T bbs;
        T& operator()() { return bbs; }
        const T& operator()() const { return bbs; }
      };
    };
  };
} // namespace bbsapp
#endif
